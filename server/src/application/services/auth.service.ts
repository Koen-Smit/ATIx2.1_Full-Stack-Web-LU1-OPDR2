import { Injectable, UnauthorizedException, ConflictException, Inject } from '@nestjs/common';
import * as bcrypt from 'bcryptjs';
import * as jwt from 'jsonwebtoken';
import { User } from '../../domain/entities/user.entity';
import type { IUserRepository } from '../../domain/repositories/user-repository.interface';
import { LoginDto, RegisterDto } from '../../presentation/dto/auth.dto';

@Injectable()
export class AuthService {
  private readonly jwtSecret = process.env.JWT_SECRET || 'defaultsecret';
  private readonly jwtExpiresIn = '24h';

  constructor(
    @Inject('IUserRepository')
    private readonly userRepository: IUserRepository,
  ) {}

  async register(registerDto: RegisterDto): Promise<{ access_token: string; user: any }> {
    // Normalize email to lowercase
    const normalizedEmail = registerDto.email.toLowerCase();
    
    // Check if user already exists
    const existingUser = await this.userRepository.findByEmail(normalizedEmail);
    if (existingUser) {
      throw new ConflictException('User with this email already exists');
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(registerDto.password, 10);

    const newUser = new User(
      '', // ID will be generated by MongoDB
      registerDto.firstname,
      registerDto.lastname,
      normalizedEmail,
      hashedPassword,
      [], // favorites 
      new Date(),
      new Date(),
    );

    const savedUser = await this.userRepository.create(newUser);

    // Generate JWT token
    const payload = { email: savedUser.email, sub: savedUser._id };
    const access_token = jwt.sign(payload, this.jwtSecret, { expiresIn: this.jwtExpiresIn });

    return {
      access_token,
      user: {
        firstname: savedUser.firstname,
        lastname: savedUser.lastname,
        email: savedUser.email,
      },
    };
  }

  async login(loginDto: LoginDto): Promise<{ access_token: string; user: any }> {
    // Normalize email to lowercase
    const normalizedEmail = loginDto.email.toLowerCase();
    
    // Find user by email
    const user = await this.userRepository.findByEmail(normalizedEmail);
    if (!user) {
      throw new UnauthorizedException('Invalid credentials');
    }

    // Verify password
    const isPasswordValid = await bcrypt.compare(loginDto.password, user.password);
    if (!isPasswordValid) {
      throw new UnauthorizedException('Invalid credentials');
    }

    // Generate JWT token
    const payload = { email: user.email, sub: user._id };
    const access_token = jwt.sign(payload, this.jwtSecret, { expiresIn: this.jwtExpiresIn });

    return {
      access_token,
      user: {
        firstname: user.firstname,
        lastname: user.lastname,
        email: user.email,
      },
    };
  }

  async validateUser(email: string, password: string): Promise<any> {
    const user = await this.userRepository.findByEmail(email);
    if (user && await bcrypt.compare(password, user.password)) {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { password: userPassword, ...result } = user;
      return result;
    }
    return null;
  }

  async validateUserById(userId: string): Promise<User | null> {
    return await this.userRepository.findById(userId);
  }

  verifyToken(token: string): any {
    try {
      return jwt.verify(token, this.jwtSecret);
    } catch {
      throw new UnauthorizedException('Invalid token');
    }
  }
}