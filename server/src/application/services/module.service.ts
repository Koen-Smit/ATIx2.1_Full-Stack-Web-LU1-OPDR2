import { Injectable, NotFoundException } from '@nestjs/common';
import { Module } from '../../domain/entities/module.entity';
import type { IModuleRepository } from '../../domain/repositories/module-repository.interface';

@Injectable()
export class ModuleService {
  constructor(private readonly moduleRepository: IModuleRepository) {}

  async getAllModules(): Promise<Module[]> {
    return await this.moduleRepository.findAll();
  }

  async getModuleById(id: string): Promise<Module> {
    const module = await this.moduleRepository.findById(id);
    if (!module) {
      throw new NotFoundException(`Module with ID ${id} not found`);
    }
    return module;
  }

  async getModulesByLevel(level: string): Promise<Module[]> {
    return await this.moduleRepository.findByLevel(level);
  }

  async getModulesByLocation(location: string): Promise<Module[]> {
    return await this.moduleRepository.findByLocation(location);
  }

  async createModule(moduleData: Omit<Module, 'id' | 'createdAt' | 'updatedAt'>): Promise<Module> {
    const now = new Date();
    const module = new Module(
      '', // ID will be generated by MongoDB
      moduleData.name,
      moduleData.shortDescription,
      moduleData.description,
      moduleData.content,
      moduleData.studyCredit,
      moduleData.location,
      moduleData.contactId,
      moduleData.level,
      moduleData.learningOutcomes,
      now,
      now,
    );

    if (!module.isValidLevel()) {
      throw new Error('Invalid level provided');
    }

    if (!module.hasMinimumCredits()) {
      throw new Error('Study credits must be greater than 0');
    }

    return await this.moduleRepository.create(module);
  }

  async updateModule(id: string, moduleData: Partial<Module>): Promise<Module> {
    const updatedModule = await this.moduleRepository.update(id, moduleData);
    if (!updatedModule) {
      throw new NotFoundException(`Module with ID ${id} not found`);
    }
    return updatedModule;
  }

  async deleteModule(id: string): Promise<void> {
    const deleted = await this.moduleRepository.delete(id);
    if (!deleted) {
      throw new NotFoundException(`Module with ID ${id} not found`);
    }
  }
}